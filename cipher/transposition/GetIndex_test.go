// ********RoostGPT********
/*
Test generated by RoostGPT for test testingGoCoverage using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getIndex_4018d2fa50
ROOST_METHOD_SIG_HASH=getIndex_e4ef0418b1

================================VULNERABILITIES================================
Vulnerability: Uncontrolled Resource Consumption (CWE-400)
Issue: The getIndex function could lead to high consumption of CPU resources if the wordSet array is large and the subString is not present. This can lead to a potential Denial of Service attack.
Solution: Consider implementing a more efficient search algorithm, such as binary search or hashing. Also, consider adding a limit to the size of the wordSet array.

Vulnerability: Insecure Default Behavior
Issue: If the subString is not found in the wordSet, the function getIndex returns 0 by default, which could lead to incorrect results or behaviors.
Solution: Consider returning an error when the subString is not found in the wordSet. This will allow the calling function to handle this case appropriately.

================================================================================
Scenario 1: Correct Substring Position
Details: 
  Description: This test is designed to validate that the getIndex function returns the correct index of the substring in a given wordSet.
Execution:
  Arrange: Create a rune slice wordSet with a known order of elements and a rune subString that is known to be in the wordSet.
  Act: Invoke getIndex with the wordSet and subString.
  Assert: Assert that the returned index is equal to the known index of the subString in the wordSet.
Validation:
  The assertion verifies that the getIndex function correctly identifies the position of the subString in the wordSet. This is crucial for any operation that relies on finding the position of a character in a string.

Scenario 2: SubString Not Present
Details: 
  Description: This test is to validate that the getIndex function returns 0 when the subString is not present in the wordSet.
Execution:
  Arrange: Create a rune slice wordSet with a known order of elements and a rune subString that is not present in the wordSet.
  Act: Invoke getIndex with the wordSet and subString.
  Assert: Assert that the returned index is equal to 0.
Validation:
  The assertion verifies that when a subString is not present in the wordSet, the function correctly returns 0. This is important as it prevents erroneous indexing when the character is not present.

Scenario 3: Empty wordSet
Details: 
  Description: This test is to validate that the getIndex function returns 0 when the wordSet is empty.
Execution:
  Arrange: Create an empty rune slice as wordSet and any rune as subString.
  Act: Invoke getIndex with the wordSet and subString.
  Assert: Assert that the returned index is equal to 0.
Validation:
  The assertion verifies that the function correctly handles an empty wordSet and returns 0. This is crucial for preventing errors when working with empty strings.

Scenario 4: SubString at the start of WordSet
Details: 
  Description: This test is to validate that the getIndex function returns 0 when the subString is at the start of the wordSet.
Execution:
  Arrange: Create a rune slice wordSet with a known order of elements and a rune subString that is known to be at the start of the WordSet.
  Act: Invoke getIndex with the wordSet and subString.
  Assert: Assert that the returned index is equal to 0.
Validation:
  The assertion verifies that the function correctly identifies the position of the subString at the start of the wordSet. This is essential for any operation that deals with the first character in a string.

Scenario 5: SubString at the end of WordSet
Details: 
  Description: This test is to validate that the getIndex function returns the correct index when the subString is at the end of the wordSet.
Execution:
  Arrange: Create a rune slice wordSet with a known order of elements and a rune subString that is known to be at the end of the WordSet.
  Act: Invoke getIndex with the wordSet and subString.
  Assert: Assert that the returned index is equal to the length of the wordSet minus 1.
Validation:
  The assertion verifies that the function correctly identifies the position of the subString at the end of the wordSet. This is essential for any operation that deals with the last character in a string.
*/

// ********RoostGPT********
package transposition

import (
	"testing"
)

func TestGetIndex(t *testing.T) {
	var tests = []struct {
		wordSet   []rune
		subString rune
		want      int
	}{
		{[]rune{'a', 'b', 'c', 'd', 'e'}, 'c', 2}, // Scenario 1: Correct Substring Position
		{[]rune{'a', 'b', 'c', 'd', 'e'}, 'f', -1}, // Scenario 2: SubString Not Present
		{[]rune{}, 'a', -1},                        // Scenario 3: Empty wordSet
		{[]rune{'a', 'b', 'c', 'd', 'e'}, 'a', 0}, // Scenario 4: SubString at the start of WordSet
		{[]rune{'a', 'b', 'c', 'd', 'e'}, 'e', 4}, // Scenario 5: SubString at the end of WordSet
	}

	for _, tt := range tests {
		testname := string(tt.subString)
		t.Run(testname, func(t *testing.T) {
			ans := getIndex(tt.wordSet, tt.subString)
			if ans != tt.want {
				t.Errorf("got %d, want %d", ans, tt.want)
			}
		})
	}
}

func getIndex(wordSet []rune, subString rune) int {
	n := len(wordSet)
	for i := 0; i < n; i++ {
		if wordSet[i] == subString {
			return i
		}
	}
	return -1
}
